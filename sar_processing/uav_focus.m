% uav_focus.m
%clear variables
close all;
clc;

%% Add the paths
% Add the folders with the functions

addpath('./trajectories',...
    './sar_utilities',...
    './focusing', ...
    genpath('../utilities'),...
    addpath(genpath('../range_compression')));

%% Definition of the parameters

% Each experiment has a folder. The folder can be generated using the
% generateProjectFolder.m script.
%
% The folder will containg the following sub-directories:

% raw:          place here the .dat file generated by the SDR
% rc:           the script will write in this folder the range compressed data
% images:       place here images, videos or figures of the experiment
% trajectories: place here the .mat file containing the
%               trajectory of the platform for the current experiment. See the
%               loadTrajectories.m function
% waveform:     Place here the .mat file containing the transmitted waveform

% TODO: write a file info.txt with infos about the experiment such as (PRF, PRI,
% pulse length, bandwidth, central frequency, total trajectory lenth)

% Folder of the experiment.
exp_name = "exp9";
%experiment_folder              = "C:\Users\user\OneDrive - Politecnico di Milano\PhD\projects\UAV SAR\uav_bistatic_sar\mat_files\uav_test\20220826\radar\exp1\";
experiment_folder              = strcat("D:\20230713_bistatic\",exp_name);

% Maximum range. The script will cut the data after range compression
max_range                      = 2000;

% Over sampling factor. After range compression and data cut, the data will be
% oversampled by this factor in fast time
OSF                            = 4;

% Under sampling factor for the slow-times (odd-number!). We use a very
% high PRF, therefore we can filter the data in slow-time and undersample
% it to improve SNR and reduce computational burden in the TDBP
USF                            = 21;

% Flag for the notching of the zero doppler peak (mean removal). The direct
% path from TX to RX antennae will be very strong. This flag abilitate a
% zero-doppler filtering of the data in slow-time.
zero_doppler_notch             = 0;



% Starting sample to process in slow-time. This is useful to trow away some
% samples at the beginning of the acquisition
index_start = 1;


%% Start the processing

% loading the parameters of the radar (f0,PRI,PRF,BW,fs,gains, waveform, etc.)
radar_parameters = loadRadarParameters(experiment_folder,"bistatic");

% Convert raw data from .dat to .mat
rawDataConvert(experiment_folder, radar_parameters.samples_waveform);

% load the raw data and range compress it. If it finds some data in the RC
% folder it just loads it without doing the range compression.
[Drc, t_ax, tau_ax] = loadRawDataAndRangeCompress(experiment_folder, radar_parameters, max_range, OSF);

figure; imagesc(tau_ax, t_ax*3e8/2, db(Drc)); colorbar; title("Range compressed data without zero doppler notching");
xlabel("slow time [s]"); ylabel("fast time [s]"); axis xy, %clim([80 120])

% Cut the data to remove bad values at the beginning of the acquisition
Drc = Drc(:,index_start:end);
tau_ax = tau_ax(index_start:end);

%% Nothc filtering
if zero_doppler_notch
    % Notch filter on the zero Doppler to kill the direct path from TX antenna
    % to RX antenna
    Drc = zeroDopplerNotch(Drc, radar_parameters.PRF);

    index_zero = find(min(abs(t_ax))==t_ax);

    % Plot the range compressed data matrix
    figure; imagesc(tau_ax, t_ax(index_zero:end), db(Drc(index_zero:end,:)));
    axis xy
    xlabel("Slow time [s]");
    ylabel("range [m]");
    title("Range compressed data WITH zero doppler notching");
    colorbar;
    clim([100,140]);

    showDopplerPlot(Drc(1:end,:),tau_ax, t_ax(1:end), "full"); clim([140,200])

end

% Low pass filter and undersample the range compressed data. We have a very
% high PRF, so we can do it
[Drc_lp, radar_parameters, tau_ax] = lowPassFilterAndUndersample(Drc, radar_parameters, tau_ax, USF);

% Filter the range compressed data with a gaussian filter in range to
% remove sidelobes
Drc_lp = filterRange(Drc_lp, t_ax, radar_parameters.B);
% showDopplerPlot(Drc(1:end,:),tau_ax, t_ax(1:end), "full");
% caxis([140, 200])
%
figure; imagesc(tau_ax, t_ax*3e8/2, db(Drc_lp));
axis xy
xlabel("Slow time [s]");
ylabel("range [m]");
title(["Range compressed data with range filtering for sidelobes removal"]);
Drc = Drc_lp;
%% Bistatic processing
[POSE, lla0, targets] = loadDroneTrajectory(experiment_folder);
[tx_enu, rx_enu,yaw] = alignDroneRadarTime(POSE, targets, tau_ax, radar_parameters);

if strcmp(radar_parameters.mode, "bistatic")
    Drc_corr = correctTimeShift(Drc, tx_enu, rx_enu, t_ax);
    Drc_corr1 = correctFreqShift(Drc_corr,tx_enu, rx_enu, radar_parameters.f0);
    Drc = Drc_corr1;
end
%%
% Plot the incoherent mean along slow-times to check resolution from the
% direct path.
figure; plot(t_ax*3e8/2, mean(abs(Drc),2)); xlabel("range [m]"); ylabel("Amplitude");
title("Resolution check from the direct path"); grid on;

%% Coordinate transformation
% define the rotation matrix to use SCH reference frame. It is like XYZ,
% where S move along the aperture
[enu2sch, center_enu] = computeENU2SCH(rx_enu);

rx_sch = (rx_enu - center_enu) * enu2sch;
tx_sch = (tx_enu - center_enu) * enu2sch;

rx_speed = [0;diff(rx_sch(:,1))] ./ (tau_ax(2)-tau_ax(1));


figure,subplot(3,1,1),plot(rx_sch(:,1)),title("S"),grid
subplot(3,1,2),plot(rx_sch(:,2)), title("C"),grid
subplot(3,1,3),plot(rx_sch(:,3)), title("H"),grid

for n = 1:length(targets)
    tgt_sch(n,:) = ([targets(n).X targets(n).Y targets(n).Z] - center_enu) * enu2sch;
end


% Scenario ENU
figure, plot(rx_enu(:,1),rx_enu(:,2),"LineWidth",1.7), title("Scenario ENU"), hold on
plot(rx_enu(1,1),rx_enu(1,2),'ro')
for n = 1:length(targets)
    plot(targets(n).X,targets(n).Y,'^r',LineWidth=1)
end
%TX
plot(tx_enu(1,1),tx_enu(1,2),'*g',LineWidth=1)
%plot(targets(5).X,targets(5).Y,'^k',LineWidth=1)
hold off
axis equal

figure, plot(rx_sch(:,1),rx_sch(:,2),"LineWidth",1.7), title("Scenario SCH"), hold on
plot(rx_sch(1,1),rx_sch(1,2),'ro')
for n = 1:size(tgt_sch,1)
    plot(tgt_sch(n,1),tgt_sch(n,2),'^r',LineWidth=1)
end
%TX
plot(tx_sch(1,1),tx_sch(1,2),'*g',LineWidth=1)
%plot(tgt_sch(5,1),tgt_sch(5,2),'^k',LineWidth=1)
hold off
axis equal
%% Focusing
% Azimuth resolution (-1 means same as range resolution). set the desiderd azimuth
% resolution
rho_az = .5;
if rho_az == -1
    rho_az = radar_parameters.rho_rg;
end
% Squint for the focusing (deg).
squint = [0];%[-15 -10 -5 0 5 10 15];

% traj.Sx = zeros(size(Drc,2),1);
% traj.Sx(Nbegin:Nend) = linspace(-15,15,length(Nbegin:Nend));
% traj.Sy = zeros(size(traj.Sx));
% traj.Sz = zeros(size(traj.Sx));


% Define the backprojection grid
x_ax = -100:rho_az/2:100;%min(rx_sch(:,1))*2 : rho_az/2 : max(rx_sch(:,1))*2;
y_ax = 10-1*(0 : radar_parameters.rho_rg/2 : 2000);
[X,Y] = meshgrid(x_ax,y_ax);
Z = zeros(size(X));
if strcmp(exp_name,"exp1")
    Nbegin = floor(34000/USF);%exp1
    Nend = floor(96000/USF);
else
    Nbegin = floor(34755/USF);%exp9
    Nend = floor(71500/USF);
end
[stack,sumCount] = focusingCUDA(Drc(:,Nbegin:Nend), t_ax, radar_parameters.f0, tx_sch(Nbegin:Nend,:), ...
    rx_sch(Nbegin:Nend,:),rx_speed(Nbegin:Nend), X,Y,Z, rho_az, squint);
%I = focusDroneTDBP(Drc_lp(:,Nbegin:Nend), t_ax, radar_parameters.f0,...
%    traj.Sx(Nbegin:Nend), traj.Sy(Nbegin:Nend), traj.Sz(Nbegin:Nend),...
%    X,Y,Z,...
%    rho_az, squint);
%% Plot
squintIdx = 1;
I = stack(:,:,squintIdx);
% Ieq = I ./ sumCount(:,:,squintIdx);
figure; imagesc(x_ax,y_ax,10*log10(abs(I).^2)); colorbar; axis xy, 

hold on
plot(rx_sch(:,1),rx_sch(:,2),"LineWidth",1.7)

xlabel("x [m]"); ylabel("y [m]"); title("Focused SAR image");
hold on
for n = 1:size(tgt_sch,1)
    plot(tgt_sch(n,1),tgt_sch(n,2),'^r',LineWidth=1)
end
%TX
plot(tx_sch(1,1),tx_sch(1,2),'*g',LineWidth=1)
%plot(tgt_sch(5,1),tgt_sch(5,2),'^k',LineWidth=1)
hold off
axis xy tight
%set(gca, 'YDir','reverse')
%set(gca, 'XDir','reverse')
cax = [100,200];
clim(cax)
%caxis([1e7 11e7]);
% Autofocusing

%% GIF

makeGIF(stack,squint,x_ax,y_ax,tgt_sch,cax)
